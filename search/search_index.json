{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to LCLS Live For full source see lcls-live on GitHub. LCLS Tao Model in Python A Tao model is instantiated in Python with the following: from lcls_live.bmad import LCLSTaoModel M = LCLSTaoModel ( 'sc_sxr' )","title":"Welcome to LCLS Live"},{"location":"#welcome-to-lcls-live","text":"For full source see lcls-live on GitHub.","title":"Welcome to LCLS Live"},{"location":"#lcls-tao-model-in-python","text":"A Tao model is instantiated in Python with the following: from lcls_live.bmad import LCLSTaoModel M = LCLSTaoModel ( 'sc_sxr' )","title":"LCLS Tao Model in Python"},{"location":"bmad/","text":"Bmad and Tao Overview Bmad is used to model electron beam dynamics in thethe LCLS accelerators from the injectors through the undulators, and to the beam dumps. Bmad Homepage Bmad Homepage Bmad Manual Tao Manual Issues and Bug Reports should be entered on the Bmad GitHub","title":"Overview"},{"location":"bmad/#bmad-and-tao-overview","text":"Bmad is used to model electron beam dynamics in thethe LCLS accelerators from the injectors through the undulators, and to the beam dumps.","title":"Bmad and Tao Overview"},{"location":"bmad/#bmad-homepage","text":"Bmad Homepage Bmad Manual Tao Manual Issues and Bug Reports should be entered on the Bmad GitHub","title":"Bmad Homepage"},{"location":"developer/","text":"SLAC Developer setup Bmad Production Environment The current version of the Bmad distribution can be enabled with: source /usr/local/lcls/package/bmad_distributions/enable Python The standard Python 3.7 environment is enabled with: source /usr/local/lcls/package/anaconda/envs/python3.7env/bin/activate Custom packages are maintained in /usr/local/lcls/model/python : export PYTHONPATH = $PYTHONPATH :/usr/local/lcls/model/python Lattice files Lattice files are maintained in standard locations, and are referred to with these standard environmental variables: export LCLS_LATTICE = /usr/local/lcls/model/lattice/lcls-lattice export LCLS_CLASSIC_LATTICE = /usr/local/lcls/model/lattice/lcls-classic-lattice These files are updated with git : cd /usr/local/lcls/model/lattice/lcls-lattice git pull -r","title":"SLAC Developer setup"},{"location":"developer/#slac-developer-setup","text":"","title":"SLAC Developer setup"},{"location":"developer/#bmad-production-environment","text":"The current version of the Bmad distribution can be enabled with: source /usr/local/lcls/package/bmad_distributions/enable","title":"Bmad Production Environment"},{"location":"developer/#python","text":"The standard Python 3.7 environment is enabled with: source /usr/local/lcls/package/anaconda/envs/python3.7env/bin/activate Custom packages are maintained in /usr/local/lcls/model/python : export PYTHONPATH = $PYTHONPATH :/usr/local/lcls/model/python","title":"Python"},{"location":"developer/#lattice-files","text":"Lattice files are maintained in standard locations, and are referred to with these standard environmental variables: export LCLS_LATTICE = /usr/local/lcls/model/lattice/lcls-lattice export LCLS_CLASSIC_LATTICE = /usr/local/lcls/model/lattice/lcls-classic-lattice These files are updated with git : cd /usr/local/lcls/model/lattice/lcls-lattice git pull -r","title":"Lattice files"},{"location":"developer/mkdocs/","text":"Updating this documentation These docs are created using mkdocs: Setup Install mkdocs and its various plugins using conda and pip : conda install mkdocs pygments mkdocs-material pip install mkdocs-minify-plugin Deploy to GitHub pages mkdocs gh-deploy SLAC clone A clone of the lcls-live gh-pages branch is here /afs/slac/www/grp/ad/docs/python/lcls-live and are served here","title":"mkdocs"},{"location":"developer/mkdocs/#updating-this-documentation","text":"These docs are created using mkdocs:","title":"Updating this documentation"},{"location":"developer/mkdocs/#setup","text":"Install mkdocs and its various plugins using conda and pip : conda install mkdocs pygments mkdocs-material pip install mkdocs-minify-plugin","title":"Setup"},{"location":"developer/mkdocs/#deploy-to-github-pages","text":"mkdocs gh-deploy","title":"Deploy to GitHub pages"},{"location":"developer/mkdocs/#slac-clone","text":"A clone of the lcls-live gh-pages branch is here /afs/slac/www/grp/ad/docs/python/lcls-live and are served here","title":"SLAC clone"},{"location":"developer/roadmap/","text":"Development Roadmap Basic requirements for the accelerator models Read PVs from the live machine publish transfer matrices, computed Twiss as PV tables Refresh rate should be 1/2 Hz, to help an operator hand-tune. How fast can it be? Read initial Twiss from PVs (served from cu_inj surrogate) Next requirements Read correctors, serve orbit. (Needs some analysis) Serve response matrices: Corrector to BPM LEM Track particles (OpenMP will speed up) LCLS Live Model development TODO Roughly in order of priority https://github.com/slaclab/lcls_live_model?organization=slaclab&organization=slaclab Beam code switch for 'second beam' needs a command line switch on init? BEAMCODE 1, 2 Current init is: cu_sxr, cu_hxr. Read initial Twiss should be served by cu-inj-surrogate. S Surrogate should serve sigma matrix, derived 'Twiss' Should read from PVs Offline use Simple method to test this without EPICs Collect internal state Vanilla Tao Live Model -> Live Bmad models There will be other models multi-fidelity models (see below) Clean up ModelService class move NTTable init outside generalize to serve: orbit get ele dict info, other structures from pytao response matrices (optional) beam tracking (probably a seperate model instance for this, can use OpenMP) Tao object Tao -> TaoModel -> (LCLSTaoModel that has all Tao commands.) Brige: PV -> bridge -> Vanilla Tao Model saving for simple reload in tao: tao -lat lat.bmad Make more similar to the cu-inj-surrogate, LUME-model, or vice-versa? keep track of internal state Generalize to compute on SDF Tao, Impact-T, Impact-Z, Genesis 1.3, SRW... under LUME scope Add lcls-live as a dependency rely on CSV mapping from lcls-live Klystron class from lcls-live Clean up Klystron reader many things are hardcoded tao commands Clean up repository move Python code into a subdirector, add docs OR, make this a very small script that depends on lcls-live classes and functions. Documentation The code is pretty clear, but needs docstrings, examples, etc. CTRL-C doesn't kill Need to serve fake PVs for testing simulation mode, from JSON file or simple PV server from JSON expand lcls-live/epics_proxy Klystron reader fails when no PVs are there lcls_live_model / klystron_tools . py \", line 220, in testbit return (( int ( word ) & mask ) > 0 ) TypeError : int () argument must be a string , a bytes - like object or a number , not 'NoneType'","title":"Roadmap"},{"location":"developer/roadmap/#development-roadmap","text":"","title":"Development Roadmap"},{"location":"developer/roadmap/#basic-requirements-for-the-accelerator-models","text":"Read PVs from the live machine publish transfer matrices, computed Twiss as PV tables Refresh rate should be 1/2 Hz, to help an operator hand-tune. How fast can it be? Read initial Twiss from PVs (served from cu_inj surrogate)","title":"Basic requirements for the accelerator models"},{"location":"developer/roadmap/#next-requirements","text":"Read correctors, serve orbit. (Needs some analysis) Serve response matrices: Corrector to BPM LEM Track particles (OpenMP will speed up)","title":"Next requirements"},{"location":"developer/roadmap/#lcls-live-model-development-todo","text":"Roughly in order of priority https://github.com/slaclab/lcls_live_model?organization=slaclab&organization=slaclab","title":"LCLS Live Model development TODO"},{"location":"developer/roadmap/#beam-code-switch-for-second-beam","text":"needs a command line switch on init? BEAMCODE 1, 2 Current init is: cu_sxr, cu_hxr.","title":"Beam code switch for 'second beam'"},{"location":"developer/roadmap/#read-initial-twiss","text":"should be served by cu-inj-surrogate. S Surrogate should serve sigma matrix, derived 'Twiss' Should read from PVs","title":"Read initial Twiss"},{"location":"developer/roadmap/#offline-use","text":"Simple method to test this without EPICs Collect internal state Vanilla Tao","title":"Offline use"},{"location":"developer/roadmap/#live-model-live-bmad-models","text":"There will be other models multi-fidelity models (see below)","title":"Live Model -&gt; Live Bmad models"},{"location":"developer/roadmap/#clean-up-modelservice-class","text":"move NTTable init outside generalize to serve: orbit get ele dict info, other structures from pytao response matrices (optional) beam tracking (probably a seperate model instance for this, can use OpenMP) Tao object Tao -> TaoModel -> (LCLSTaoModel that has all Tao commands.) Brige: PV -> bridge -> Vanilla Tao Model saving for simple reload in tao: tao -lat lat.bmad Make more similar to the cu-inj-surrogate, LUME-model, or vice-versa? keep track of internal state","title":"Clean up ModelService class"},{"location":"developer/roadmap/#generalize-to-compute-on-sdf","text":"Tao, Impact-T, Impact-Z, Genesis 1.3, SRW... under LUME scope","title":"Generalize to compute on SDF"},{"location":"developer/roadmap/#add-lcls-live-as-a-dependency","text":"rely on CSV mapping from lcls-live Klystron class from lcls-live","title":"Add lcls-live as a dependency"},{"location":"developer/roadmap/#clean-up-klystron-reader","text":"many things are hardcoded tao commands","title":"Clean up Klystron reader"},{"location":"developer/roadmap/#clean-up-repository","text":"move Python code into a subdirector, add docs OR, make this a very small script that depends on lcls-live classes and functions.","title":"Clean up repository"},{"location":"developer/roadmap/#documentation","text":"The code is pretty clear, but needs docstrings, examples, etc.","title":"Documentation"},{"location":"developer/roadmap/#ctrl-c-doesnt-kill","text":"","title":"CTRL-C doesn't kill"},{"location":"developer/roadmap/#need-to-serve-fake-pvs-for-testing","text":"simulation mode, from JSON file or simple PV server from JSON expand lcls-live/epics_proxy","title":"Need to serve fake PVs for testing"},{"location":"developer/roadmap/#klystron-reader-fails-when-no-pvs-are-there","text":"lcls_live_model / klystron_tools . py \", line 220, in testbit return (( int ( word ) & mask ) > 0 ) TypeError : int () argument must be a string , a bytes - like object or a number , not 'NoneType'","title":"Klystron reader fails when no PVs are there"},{"location":"other/","text":"Other resources PyDM Tutorial Documentation Matlab Matlab Programmers Guide Software release procedure Cheatsheet MAD Lattices MAD Lattice release Device, element name and PV name references Oracle File Directory Service (see [1] for meme_names.m, and [2] for eget \u2013s ds Beamline Boundaries","title":"Other resources"},{"location":"other/#other-resources","text":"","title":"Other resources"},{"location":"other/#pydm","text":"Tutorial Documentation","title":"PyDM"},{"location":"other/#matlab","text":"Matlab Programmers Guide Software release procedure Cheatsheet","title":"Matlab"},{"location":"other/#mad-lattices","text":"MAD Lattice release","title":"MAD Lattices"},{"location":"other/#device-element-name-and-pv-name-references","text":"Oracle File Directory Service (see [1] for meme_names.m, and [2] for eget \u2013s ds Beamline Boundaries","title":"Device, element name and PV name references"},{"location":"overview/","text":"LCLS Live Modeling Overview The LCLS accelerator complex consists of multiple electron sources and multiple beam paths. Live models are computer simulation programs that continuously execute with inputs taken from the machine, and serve physics predictions of the beam behavior. Design models The input files for various simulation software are collected in the LCLS-Lattice repository (login required). Simulation software Bmad and Tao for charged particle beam dynamics. LUME-Impact for running Impact-T from Python. tensorflow for neural network-based machine learning (ML) surrogate models. Current Live Models Live Bmad accelerator models cu_hxr cu_sxr These read magnet and klystron PV at a rate of about 1 Hz, and serve transfer matrices, and Twiss parameters computed from these based on nominal starting conditions. Live cu_inj surrogate model cu_inj currently streaming to YouTube This is an ML model trained on Impact-T simulations of the cu_inj beam path. Computing requirements Future models: Bmad models for the sc_X for the superconducting linac beam paths. Impact-T Bunch tracking FEL interaction X-ray optics","title":"LCLS Live Modeling Overview"},{"location":"overview/#lcls-live-modeling-overview","text":"The LCLS accelerator complex consists of multiple electron sources and multiple beam paths. Live models are computer simulation programs that continuously execute with inputs taken from the machine, and serve physics predictions of the beam behavior.","title":"LCLS Live Modeling Overview"},{"location":"overview/#design-models","text":"The input files for various simulation software are collected in the LCLS-Lattice repository (login required).","title":"Design models"},{"location":"overview/#simulation-software","text":"Bmad and Tao for charged particle beam dynamics. LUME-Impact for running Impact-T from Python. tensorflow for neural network-based machine learning (ML) surrogate models.","title":"Simulation software"},{"location":"overview/#current-live-models","text":"Live Bmad accelerator models cu_hxr cu_sxr These read magnet and klystron PV at a rate of about 1 Hz, and serve transfer matrices, and Twiss parameters computed from these based on nominal starting conditions. Live cu_inj surrogate model cu_inj currently streaming to YouTube This is an ML model trained on Impact-T simulations of the cu_inj beam path.","title":"Current Live Models"},{"location":"overview/#computing-requirements","text":"","title":"Computing requirements"},{"location":"overview/#future-models","text":"Bmad models for the sc_X for the superconducting linac beam paths. Impact-T Bunch tracking FEL interaction X-ray optics","title":"Future models:"}]}